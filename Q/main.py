# ====================================
# main.py
import os
from agents.q1_parser import AgentQ1
from agents.q2_searcher import AgentQ2
# from agents.q3_expert import ExpertQ3
from shared.config import setup_logging
from typing import Dict, Any


class NginxOrchestrator:
    """–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self, config_folder: str, upstream_file_path: str, api_key: str):
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs('logs', exist_ok=True)

        self.logger = setup_logging("ORCHESTRATOR")
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        self.q1 = AgentQ1(api_key)
        self.q2 = AgentQ2(config_folder, upstream_file_path)
        # self.q3 = ExpertQ3(api_key)

        self.user_selections = {}

    def process_request(self, user_message: str) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        self.logger.info("=" * 50)
        self.logger.info(f"–ù–û–í–´–ô –ó–ê–ü–†–û–°: {user_message}")
        self.logger.info("=" * 50)

        # –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥
        self.logger.info("–≠–¢–ê–ü 1: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Q1")
        parsed_request = self.q1.parse_user_request(user_message)
        if not parsed_request:
            self.logger.error("Q1 –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
            return {"error": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞", "stage": "Q1"}

        self.logger.info(f"Q1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç: action={parsed_request.action}, domains={parsed_request.domains}")

        # –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫
        self.logger.info("–≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Q2")
        search_result = self.q2.search_configurations(parsed_request)

        # –≠—Ç–∞–ø 3: –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        self.logger.info("–≠–¢–ê–ü 3: –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        self._select_configurations(search_result)

        if not self.user_selections:
            self.logger.warning("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            return {
                "parsed_request": self._parsed_request_to_dict(parsed_request),
                "search_result": search_result,
                "stage": "NO_CONFIGS"
            }

        # –≠—Ç–∞–ø 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.logger.info("–≠–¢–ê–ü 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ Q3")
        apply_results = self.q3.apply_changes(parsed_request, self.user_selections)

        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(apply_results)} –¥–æ–º–µ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

        return {
            "parsed_request": self._parsed_request_to_dict(parsed_request),
            "search_result": search_result,
            "apply_results": apply_results,
            "stage": "COMPLETED"
        }

    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        self.logger.info("–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        print("ü§ñ Nginx Configuration Manager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")

        while True:
            try:
                user_input = input("\nüë§ –í–∞—à –∑–∞–ø—Ä–æ—Å: ").strip()
            except (KeyboardInterrupt, EOFError):
                print("\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                break

            if not user_input or user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break

            result = self.process_request(user_input)
            self._display_result(result)

    def _select_configurations(self, search_result: Dict[str, Any]):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        self.user_selections = {}
        for domain, configs in search_result.get("domains_found", {}).items():
            self.user_selections[domain] = configs
            if len(configs) == 1:
                self.logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {domain}")
            else:
                self.logger.info(f"–í—ã–±—Ä–∞–Ω—ã –í–°–ï {len(configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è {domain}")

    def _parsed_request_to_dict(self, parsed_request) -> dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ParsedRequest –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "domains": parsed_request.domains,
            "action": parsed_request.action,
            "upstreams": parsed_request.upstreams,
            "locations": parsed_request.locations,
            "schedule": parsed_request.schedule,
            "params": parsed_request.params
        }

    def _display_result(self, result: dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if result.get("error"):
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            return

        pr = result["parsed_request"]
        print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {pr['action']}")
        print(f"   –î–æ–º–µ–Ω—ã: {pr['domains']}")
        print(f"   –õ–æ–∫–∞—Ü–∏–∏: {pr['locations']}")

        sr = result.get("search_result", {})
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {sr.get('summary', {}).get('total_configs', 0)}")

        if result.get("apply_results"):
            print("   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:")
            for domain, entries in result["apply_results"].items():
                print(f"     {domain}: {len(entries)} –∏–∑–º–µ–Ω–µ–Ω–∏–π")


if __name__ == "__main__":
    CONFIG_FOLDER = "../mosru_nginx/mos_ru_nginx"
    UPSTREAM_FILE = f"{CONFIG_FOLDER}/skdpu_config/skdpu_http_upstreams.yml"
    API_KEY = "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"

    orchestrator = NginxOrchestrator(CONFIG_FOLDER, UPSTREAM_FILE, API_KEY)
    orchestrator.interactive_mode()