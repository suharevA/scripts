package main

import (
	"fmt"
	"os"
	"strings"

	"gopkg.in/yaml.v2"
)

const s = `

`

// AutoGenerated структура для хранения данных из YAML файла
type AutoGenerated struct {
	NginxHTTPUpstreams map[string]struct {
		Domains []string `yaml:"domains"`
		Main    struct {
			Servers []string `yaml:"servers"`
		} `yaml:"main"`
		Backup struct {
			Servers []string `yaml:"servers"`
		} `yaml:"backup"`
		SystemID string `yaml:"system_id"`
	} `yaml:"nginx_http_upstreams"`
}

func main() {
	var c AutoGenerated
	lines := strings.Split(s, "\n")
	file, err := os.ReadFile("/Users/rusk/PycharmProjects/master/mosru_nginx/mos_ru_nginx/skdpu_config/skdpu_http_upstreams.yml")
	if err != nil {
		fmt.Println("Error reading file:", err)
		return
	}

	err = yaml.Unmarshal(file, &c)
	if err != nil {
		fmt.Println("Error unmarshalling YAML:", err)
		return
	}

	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			continue // Пропускаем пустые строки
		}

		if data, ok := c.NginxHTTPUpstreams[line]; ok {
			// Преобразование структуры обратно в YAML
			yamlData, err := yaml.Marshal(data)
			if err != nil {
				fmt.Printf("Error marshalling data to YAML: %v\n", err)
				continue
			}
			fmt.Printf("%s:\n%s\n", line, string(yamlData))
		} else {
			fmt.Printf("No data found for %s\n", line)
			SearchValuesInSkdpuYml([]string{line})
		}
	}
}
