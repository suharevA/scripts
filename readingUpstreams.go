package main

import (
	"fmt"
	"os"
	"strings"

	"gopkg.in/yaml.v2"
)

const s = `
school_mos_ru
school_mos_ru_pass_materials_choice
school_mos_ru_contract
school_mos_ru_dimmer
school_mos_ru_guard
school_mos_ru_notifications
school_mos_ru_fos
school_mos_ru_alice
school_mos_ru_alice2
school_mos_ru_external_files
school_mos_ru_teacherportfolio
school_mos_ru_educationmanagement
school_mos_ru_educationmanagement-v2
school_mos_ru_educationmanagement-v3
school_mos_ru_news_management
school_mos_ru_news
school_mos_ru_help
school_mos_ru_contests
school_mos_ru_contests_control
school_mos_ru_storage
school_mos_ru_dqt
school_mos_ru_edumc
school_mos_ru_avatar
school_mos_ru_avatar
school_mos_ru_vrlabs
school_mos_ru_joyadmin
school_mos_ru_edutools
school_mos_ru_projectacctivity
school_mos_ru_projectacctivity
school_mos_ru_api
school_mos_ru_uds
school_mos_ru_diary
school_mos_ru_uds
school_mos_ru_informer
school_mos_ru_deviceauth
school_mos_ru_mosutils
school_mos_ru_eks
school_mos_ru_environment
school_mos_ru_enrolment_ae
school_mos_ru_student_portfolio
school_mos_ru_enrolment_preschool
school-test_mos_ru_teacher
school_mos_ru_teacher_portfolio
school_mos_ru_teacher_attestation
school_mos_ru_tests
school_mos_ru_enrolment_college
school_mos_ru_nsi
school_mos_ru_enrolment_school
school_mos_ru_app
school_mos_ru_adminpp
school_mos_ru_webguard
school_mos_ru_mes_dqt
school_mos_ru_mos
school_mos_ru_portfolio
school_mos_ru_mes_internal_auth
school_mos_ru_reg-help
school_mos_ru_dashboard
school_mos_ru_joy
school_mos_ru_passport
school_mos_ru_prod_food
school_mos_ru_management_banners
school_mos_ru_management_stories
school_mos_ru_management_pf
school_mos_ru_management_mail
school_mos_ru_cashier
school_mos_ru
school_mos_ru_portfolio
school_mos_ru_prod_joykeycloak
school_mos_ru_pass_infopanel
school_mos_ru_tasting
school_mos_ru_lemma
school_mos_ru_authenticate
school_mos_ru_vcs
school_mos_ru_projectactivitygl
`

// AutoGenerated структура для хранения данных из YAML файла
type AutoGenerated struct {
	NginxHTTPUpstreams map[string]struct {
		Domains []string `yaml:"domains"`
		Main    struct {
			Servers []string `yaml:"servers"`
		} `yaml:"main"`
		Backup struct {
			Servers []string `yaml:"servers"`
		} `yaml:"backup"`
		SystemID string `yaml:"system_id"`
	} `yaml:"nginx_http_upstreams"`
}

func main() {
	var c AutoGenerated
	lines := strings.Split(s, "\n")
	file, err := os.ReadFile("/Users/rusk/PycharmProjects/master/mosru_nginx/mos_ru_nginx/skdpu_config/skdpu_http_upstreams.yml")
	if err != nil {
		fmt.Println("Error reading file:", err)
		return
	}

	err = yaml.Unmarshal(file, &c)
	if err != nil {
		fmt.Println("Error unmarshalling YAML:", err)
		return
	}

	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			continue // Пропускаем пустые строки
		}

		if data, ok := c.NginxHTTPUpstreams[line]; ok {
			// Преобразование структуры обратно в YAML
			yamlData, err := yaml.Marshal(data)
			if err != nil {
				fmt.Printf("Error marshalling data to YAML: %v\n", err)
				continue
			}
			fmt.Printf("%s:\n%s\n", line, string(yamlData))
		} else {
			fmt.Printf("No data found for %s\n", line)
			SearchValuesInSkdpuYml([]string{line})
		}
	}
}
